<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS7正确配置了samba服务，Windows能登陆当提示没权限问题解决</title>
      <link href="/2020/08/06/CentOS7%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE%E4%BA%86samba%E6%9C%8D%E5%8A%A1%EF%BC%8CWindows%E8%83%BD%E7%99%BB%E9%99%86%E5%BD%93%E6%8F%90%E7%A4%BA%E6%B2%A1%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/08/06/CentOS7%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AE%E4%BA%86samba%E6%9C%8D%E5%8A%A1%EF%BC%8CWindows%E8%83%BD%E7%99%BB%E9%99%86%E5%BD%93%E6%8F%90%E7%A4%BA%E6%B2%A1%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>关闭SELinux即可。</p><h3 id="临时关闭"><a href="#临时关闭" class="headerlink" title="临时关闭"></a>临时关闭</h3><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806233231.png" alt=""></p><h3 id="永久关闭"><a href="#永久关闭" class="headerlink" title="永久关闭"></a>永久关闭</h3><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806233244.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CENTOS7读取NTFS格式的移动硬盘和exFAT格式的U盘</title>
      <link href="/2020/08/06/CENTOS7%E8%AF%BB%E5%8F%96NTFS%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%92%8CexFAT%E6%A0%BC%E5%BC%8F%E7%9A%84U%E7%9B%98/"/>
      <url>/2020/08/06/CENTOS7%E8%AF%BB%E5%8F%96NTFS%E6%A0%BC%E5%BC%8F%E7%9A%84%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E5%92%8CexFAT%E6%A0%BC%E5%BC%8F%E7%9A%84U%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="NTFS"><a href="#NTFS" class="headerlink" title="NTFS"></a>NTFS</h2><h3 id="更新阿里的yum源"><a href="#更新阿里的yum源" class="headerlink" title="更新阿里的yum源"></a>更新阿里的yum源</h3><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232909.png" alt=""></p><h3 id="下载ntfs依赖"><a href="#下载ntfs依赖" class="headerlink" title="下载ntfs依赖"></a>下载ntfs依赖</h3><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232923.png" alt=""></p><h2 id="exFat"><a href="#exFat" class="headerlink" title="exFat"></a>exFat</h2><h3 id="安装nux仓库"><a href="#安装nux仓库" class="headerlink" title="安装nux仓库"></a>安装nux仓库</h3><p><code>sudo yum install -y http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</code></p><h3 id="安装exfat依赖"><a href="#安装exfat依赖" class="headerlink" title="安装exfat依赖"></a>安装exfat依赖</h3><p><code>sudo yum install exfat-utils fuse-exfat</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CENTOS7转文本文件为UTF-8格式</title>
      <link href="/2020/08/06/CENTOS7%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%BAUTF-8%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/08/06/CENTOS7%E8%BD%AC%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E4%B8%BAUTF-8%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>windows平台下的文本文件拷贝到centos7下打开乱码，可以通过enca工具修改为utf-8格式</p><ol><li><p>下载enca<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232358.png" alt=""></p></li><li><p>转换即可<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232419.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac下Boost环境搭建</title>
      <link href="/2020/08/06/Mac%E4%B8%8BBoost%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/08/06/Mac%E4%B8%8BBoost%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Boost，一个功能强大、跨平台、开源而且免费的C++程序库，可以在其<a href="http://www.boost.org" target="_blank" rel="noopener">官网</a>了解更多。C++标准经过不断的升级完善，现在已经功能越来越吸引人了，Boost开发过程中也吸引了很多C++11新特性，从而更兼容C++的标准库了，这样，有什么理由不用它呢？虽然很多东西我们可以自己写，但是，借助功能稳定的库，可以提高生产力，节约程序员的时间，何乐不为？当然，并非让我们只是调用函数，传参数，完成任务就行了，如果不去了解下背后原理，那只能称之为码农，而不是程序员了。<br>由于开发环境基于Mac，那就基于它来搭建一个开发平台，来体验boost库的设计美妙和功能强大吧~：</p><ol><li><p>首先，需要下载boost的源码包，这里使用这个版本：boost_1_60_0.tar.bz2</p></li><li><p>解压，目录结构如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806231652.png" alt=""><br>boos子目录下就是其源码了，它们按照功能划分，很清晰。</p></li><li><p>编译。编译器至少应支持C++98标准，这里使用gcc编译器，如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806231726.png" alt=""></p></li><li><p>安装：<br>执行解压目录下文件进行配置：<code>./bootstrap.sh</code><br>执行<code>sudo ./b2 --buildtype=complete install</code>进行boost所有库的安装，在mac下安装后头文件路径为:/usr/local/include/boost，库路径为/usr/local/lib</p></li><li><p>构建工具安装<br>构建工具可以使用make、cmake等，这里使用boost自带的b2，它使用jamroot来配置、管理代码，然后每个模块子目录下都有jamfile。</p></li></ol><ul><li>cd tools/build</li><li>./booststrap.sh</li><li>sudo ./b2 install</li></ul><p>6.测试代码：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806231928.png" alt=""></p><p>7.编译运行：<br>目录结构如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806231952.png" alt=""><br>jamroot和jamfile文件内容分别如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232022.png" alt=""><br>jamroot说明了整个目录结构的编译规则，jamfile说明了文件的执行输出，如exe，unit-test等，现在需要测试main.cpp，进入te目录下执行b2命令即可，输出，执行后目录结构如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806232053.png" alt=""><br>可以看到，在jamfile声明了unit-test，在执行b2命令时也进行了单元测试，这里默认生成debug版本的输出文件，如果要发布，执行”b2 release”即可。这里看到输出boost版本为106000，现在可以使用boost来进行开发了。<br>(也可以执行”g++ -o main.out main.cpp”，注意，在ubuntu下需要加上-Istdc++，即：g++ -o main.out main.cpp -Istdc++)</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> Boost </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装配置ftp服务器</title>
      <link href="/2020/08/06/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEftp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/08/06/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEftp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li><p>在计算机管理的本地用户和组新建一个用来登录ftp服务器的用户:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230412.png" alt=""></p></li><li><p>在D盘新建一个测试目录ftp_upload:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230440.png" alt=""></p></li><li><p>添加Windows的FTP组件和IIS组件：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230508.png" alt=""></p></li><li><p>打开IIS管理平台，在网站那里右键，选择添加FTP站点，配置相关信息:</p></li><li><p>1 配置本地上传的物理路径：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230537.png" alt=""></p></li></ol><p>4.2 配置IP和SSL，这里不选择SSL先<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230558.png" alt=""></p><p>4.3 权限配置<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230619.png" alt=""></p><p>5.登录<br>在我的电脑输入如下链接，然后输入刚刚创建的账号linjk及其密码即可:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230644.png" alt=""></p><p>6.基于JAVA的ftp文件上传</p><blockquote><p>上面是使用图形界面的模式，下面基于java来配置使用</p></blockquote><p>6.1 添加maven依赖<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230739.png" alt=""></p><p>6.2 编写上传部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.linjk.Utils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.net.ftp.FTPClient;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FtpClient</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ftp上传单个文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ftpUrl      ftp地址，ip即可，不需要ftp://前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName    ftp的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password    ftp的密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> directory   上传至ftp的目录路径名，不包括ftp地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcFileName 要上传的文件全路径名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destName    上传至ftp后存储的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">upload</span><span class="params">(String ftpUrl,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String userName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String directory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String srcFileName,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 String destName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FTPClient ftpClient = <span class="keyword">new</span> FTPClient();</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ftpClient.connect(ftpUrl,<span class="number">21</span>); <span class="comment">// ftp端口默认为21</span></span><br><span class="line">            ftpClient.login(userName, password);</span><br><span class="line">            ftpClient.enterLocalPassiveMode();</span><br><span class="line">            File srcFile = <span class="keyword">new</span> File(srcFileName);</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">            ftpClient.changeWorkingDirectory(directory); <span class="comment">// 设置上传目录</span></span><br><span class="line">            ftpClient.setBufferSize(<span class="number">1024</span>);</span><br><span class="line">            ftpClient.setControlEncoding(<span class="string">"gbk"</span>);</span><br><span class="line">            ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE); <span class="comment">// 设置文件类型（二进制）</span></span><br><span class="line">            result = ftpClient.storeFile(destName, fis);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"关闭FTP连接发生异常！"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.测试代码<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230904.png" alt=""></p><p>运行后，在刚刚配置的D盘的ftp_upload的linjk子目录下会有test.txt文件：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200806230924.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> ftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy初见(一)</title>
      <link href="/2020/08/05/Groovy%E5%88%9D%E8%A7%81(%E4%B8%80)/"/>
      <url>/2020/08/05/Groovy%E5%88%9D%E8%A7%81(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>Steps:</p><ol><li><a href="https://groovy.apache.org/download.html#distro" target="_blank" rel="noopener">Download Groovy</a></li><li>Configure Enviroment【GROOVY_HOME】<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805210704.png" alt=""></li></ol><h3 id="groovysh"><a href="#groovysh" class="headerlink" title="groovysh"></a>groovysh</h3><p>类似node.js交互式功能界面，执行<code>groovysh</code>进入：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805211036.png" alt=""><br>输入<code>?</code>可以查看帮助。</p><h3 id="groovyConsole"><a href="#groovyConsole" class="headerlink" title="groovyConsole"></a>groovyConsole</h3><p>命令行工具<code>groovy</code>:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805211358.png" alt=""></p><h3 id="Sublime-Text构建"><a href="#Sublime-Text构建" class="headerlink" title="Sublime Text构建"></a>Sublime Text构建</h3><h4 id="新建groovy构建方式"><a href="#新建groovy构建方式" class="headerlink" title="新建groovy构建方式"></a>新建groovy构建方式</h4><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805212143.png" alt=""><br>输入如下命令并保存：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805212236.png" alt=""><br>然后”Tool”-“Build System”就有groovy构建方式了，写一个测试groovy文件，然后按command+B，进行构建，输出如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200805212406.png" alt=""></p><p>###命令构建<br><code>groovy ${file}</code></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Groovy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot源码分析之路(一)</title>
      <link href="/2020/07/30/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF(%E4%B8%80)/"/>
      <url>/2020/07/30/SpringBoot%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E8%B7%AF(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="源码下载与初步构建"><a href="#源码下载与初步构建" class="headerlink" title="源码下载与初步构建"></a>源码下载与初步构建</h2><p><a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">Springboot</a></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200730212258.png" alt=""></p><p>下载完成后切换至v2.2.1.RELEASE的标签版本：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200730222108.png" alt=""></p><p>然后构建打包：</p><p><code>mvn clean package -Dmaven.test.skip=true -Pfast</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200730222500.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue+Webpack发布微信公众号在iOS打开加载慢或返回时会出现空白界面需要刷新进入问题解决</title>
      <link href="/2020/07/28/Vue+Webpack%E5%8F%91%E5%B8%83%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9C%A8iOS%E6%89%93%E5%BC%80%E5%8A%A0%E8%BD%BD%E6%85%A2%E6%88%96%E8%BF%94%E5%9B%9E%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E7%95%8C%E9%9D%A2%E9%9C%80%E8%A6%81%E5%88%B7%E6%96%B0%E8%BF%9B%E5%85%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/07/28/Vue+Webpack%E5%8F%91%E5%B8%83%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%9C%A8iOS%E6%89%93%E5%BC%80%E5%8A%A0%E8%BD%BD%E6%85%A2%E6%88%96%E8%BF%94%E5%9B%9E%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%E7%A9%BA%E7%99%BD%E7%95%8C%E9%9D%A2%E9%9C%80%E8%A6%81%E5%88%B7%E6%96%B0%E8%BF%9B%E5%85%A5%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>使用Vue+Webpack开发微信公众号页面发布时，Android端打开就快很多，iOS端打开就很慢，登录进入主页后页面间切换偶尔会出现白屏，需要刷新才可以重新显示。调试会发现错误: can’t find variable: webpackjsonp，原来，Webpack在打包时用到的插件CommonsChunkPlugin会将相关文件分别打包成manifest、vendor和app三个js文件。</p><p>出现白屏估计是在iOS端的Webview加载时三个文件顺序不一样导致，而打开页面慢是因为manifest和vendor文件比app文件先加载。可注释解决，如下所示：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728235439.png" alt=""></p><p>对比了js目录下，有这个区别：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728235458.png" alt=""></p><p>在利用构建工具进行打包时，因为第三方引用模块代码通常很大，通常会将业务代码和第三方引用模块代码分开打包，从而利用浏览器的缓存区提高应用程序的首屏加载速度。</p><p>上面的CommonsChunkPlugin插件就是去抽取这些第三方的部分作为vendor.js独立打包，比较过打包后文件大小，未使用CommonsChunkPlugin的js目录大小会大两倍，文章标题出现的问题应该就是配置不对的问题，再好好了解下背后原理再试试先。</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot切换内置Web容器</title>
      <link href="/2020/07/28/SpringBoot%E5%88%87%E6%8D%A2%E5%86%85%E7%BD%AEWeb%E5%AE%B9%E5%99%A8/"/>
      <url>/2020/07/28/SpringBoot%E5%88%87%E6%8D%A2%E5%86%85%E7%BD%AEWeb%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot默认的web容器为Tomcat，通过starter-web引入的，下面介绍如何替换默认的web容器：</p><ol><li><p>修改start-web排除tomcat的引入<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234733.png" alt=""></p></li><li><p>引入Jetty<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234744.png" alt=""></p></li></ol><p>正常启动如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234808.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac平台下python引用cv2错误处理</title>
      <link href="/2020/07/28/Mac%E5%B9%B3%E5%8F%B0%E4%B8%8Bpython%E5%BC%95%E7%94%A8cv2%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2020/07/28/Mac%E5%B9%B3%E5%8F%B0%E4%B8%8Bpython%E5%BC%95%E7%94%A8cv2%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在使用brew install opencv3后，进入python，引用cv2模块(试了几个都不行)出现如下错误:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234353.png" alt=""></p><p>看了一下/usr/local/lib/python2.7/site-packages路径下，有这样一个软链接：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234415.png" alt=""></p><p>说明cv2已经正确链接了，应该就是环境变量的配置了，修改”.bash_profile”配置文件：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234436.png" alt=""></p><p>现在可以了：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234454.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下一个不错的Gif图片生成软件--GIPHY</title>
      <link href="/2020/07/28/Mac%E4%B8%8B%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84Gif%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6-GIPHY/"/>
      <url>/2020/07/28/Mac%E4%B8%8B%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E7%9A%84Gif%E5%9B%BE%E7%89%87%E7%94%9F%E6%88%90%E8%BD%AF%E4%BB%B6-GIPHY/</url>
      
        <content type="html"><![CDATA[<ol><li><p>APP Store搜索下载：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728233904.png" alt=""></p></li><li><p>下载完安装后打开界面如下，它会显示一个取景框，我们可以把它移动到需要生成Gif区域并调整大小匹配区域，然后点击底部的红色即可开始录制：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728233936.png" alt=""></p></li><li><p>这里录制一个片段后，程序界面如下，左下角就是录制的片段：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234002.png" alt=""></p></li><li><p>点击录制好的片段，弹出如下窗口:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234022.png" alt=""></p></li><li><p>点击”SAVE AS…”，格式选择”Gif”，然后自定义名字和选择保存路径即可</p></li><li><p>上传Gif并显示如下【额……这里显示不了~】:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200728234044.png" alt=""></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenJDK12源码编译</title>
      <link href="/2020/07/23/OpenJDK12%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
      <url>/2020/07/23/OpenJDK12%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<p>使用Java不知不觉也有三年了，常听说会搞Jvm底层相关的才厉害，毕竟从C语言学起的娃，自然，还是想自己编译一个JDK试试……搞起来勒~</p><p>本次直接在Mac平台上开撸，首先，得安装些必要的依赖，当然，XCode工具套装，少不了的：<code>brew install autoconf &amp;&amp; brew install freetype &amp;&amp; brew install ccache</code></p><p>然后下载源码：<code>hg clone https://hg.openjdk.java.net/jdk/jdk12</code>，过程很漫长，互联网那么大，总有办法的，搞定后源码目录结构如下所示：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723000245.png" alt=""></p><p>chmod u+x configure增加执行权限后，生成配置：<br><code>./configure --with-debug-level=slowdebug --enable-dtrace --with-jvm-variants=server --with-target-bits=64 --enable-ccache --with-num-cores=8 --with-memory-size=8000  --disable-warnings-as-errors</code></p><blockquote><p>说明：建议带上<strong>–disable-warnings-as-errors</strong>这个参数，否则编译过程中的warning也会中断编译的进程，实际上这些warning并不影响编译后的目标JDK的运行</p></blockquote><p><em>错误一：</em><br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723000337.png" alt=""></p><p><em>解决：</em><br><code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</code></p><p><em>错误二：</em><br>再次生成配置，提示必须先安装配置OpenJDK11，因为OpenJDK由多个部分(HotSpot、JDK类库、JAXWS、JAXP等)构成，其中一部分(HotSpot)代码使用C、C++编写，而更多代码使用Java来实现，因此，编译就需要另外一个基础的JDK：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723000514.png" alt=""></p><p><em>解决：</em><br>下载<a href="https://adoptopenjdk.net/archive.html?variant=openjdk11&jvmVariant=hotspot" target="_blank" rel="noopener">OpenJDK11</a>安装后，重新配置，成功：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723001614.png" alt=""></p><p>最后，执行<code>make clean &amp;&amp; make images</code>进行编译：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723002720.png" alt=""></p><p>嗯，喝杯咖啡☕️先咯，还是挺费CPU的……<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723003943.png" alt=""></p><p>大约15分钟，搞定，MBP还是挺给力的：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723004754.png" alt=""></p><p>看看构建生成了些啥玩意：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723004918.png" alt=""></p><ul><li>buildtools: 用于生成、存放编译过程中用到的工具</li><li>hotspot: HotSpot虚拟机编译的中间文件</li><li>images: 使用make *-image产生的镜像存放的地儿</li><li>jdk: 编译后的jdk在这<del>~</del></li><li>support: 存放编译时产生的中间文件</li></ul><p>真的可以了？试下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723005156.png" alt=""><br>嗯，还算顺利，第一个可调试版本的HotSpot虚拟机出来了<del>那如何在IDE进行HotSpot源码调试了？搞起</del></p><p>这里使用CLion 2020.1这款IDE:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723005344.png" alt=""></p><p>导入项目：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723005445.png" alt=""></p><p>选择源码根目录后打开：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723005536.png" alt=""><br>已经自动选好了需要导入的目录，直接点击”OK“即可：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723010210.png" alt=""></p><p>增加调试，选择自己编译出来的java命令，增加参数，如“-version”或其他某个.class文件，并移除Build Before Launch，即可下断点了：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723012346.png" alt=""></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723012537.png" alt=""></p><p>直接Resume Programme会如下输出：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723013331.png" alt=""></p><p>发现三次中断后才输出版本号，这是LLDB执行异常，可以在断点进入如上Java.c的源码时，切换到调试面板的LLDB执行如下命令：<br><code>process handle --pass true --stop false SIGSEGV</code>和<code>process handle --pass true --stop false SIGBUS</code>，再次调试就直接输出了：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723013720.png" alt=""></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200723013755.png" alt=""></p><p>这种方式不能直接在IDE构建出jdk包，会提示很多文件找不到，需要修改CMakeLists.txt文件，目前还不知道怎么搞，后面知道到再补充了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> OpenJDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenJDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen使用</title>
      <link href="/2020/07/21/Eigen%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/21/Eigen%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="http://eigen.tuxfamily.org/index.php?title=Main_Page#Overview" target="_blank" rel="noopener">Eigen</a>是一个不错的针对线性代数的C++库，它可以高效处理矩阵、向量、数值分析，在官网可以看到更详细的介绍:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003204.png" alt=""></p><p>用这个库，之前很多写的类似的代码都可以更精简、高效。</p><p>这里下载稳定版本的3.3.3，下载后解压到一个目录下，如下:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003230.png" alt=""></p><p>下面开始测试调用它的头文件来使用下:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003256.png" alt=""></p><p>这里创建了一个2*2的矩形，并输出它。</p><p>编译：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003317.png" alt=""></p><p>注意，这里需要使用”-I”参数来指定头文件的查找目录，使用Eigen很简单，只需要下载tgz包，不需要编译安装任何东西，在目录下的”Eigen”子目录就是使用Eigen编译时所需要的文件，这些文件在所有系统平台都是一样的。</p><p>编译完后，目录如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003339.png" alt=""></p><p>当前用户默认拥有执行权限，执行结果如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721003359.png" alt=""></p><p>现在在C++使用矩形运行就不需要再编写很多代码了。更多的使用参考<a href="http://eigen.tuxfamily.org/dox/" target="_blank" rel="noopener">官方帮助</a>文档就可以做很多东西了。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> Eigen </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置非root用户执行客户端命令</title>
      <link href="/2020/07/21/Docker%E9%85%8D%E7%BD%AE%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/07/21/Docker%E9%85%8D%E7%BD%AE%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E6%89%A7%E8%A1%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>在执行Docker客户端命令时，因为涉及一些系统根目录的操作，因此，需要切换到root用户权限执行，但是这样权限管理就难处理了，可以配置非root用户也可以执行docker客户端命令，步骤如下：</p><ol><li><p>创建docker组<br><code>sudo groupadd docker</code></p></li><li><p>当前登录用户加入到新建的docker组<br><code>sudo gpasswd -a ${USER} docker</code></p></li><li><p>重启docker服务<br><code>sudo systemctl restart docker</code></p></li><li><p>当前用户<strong>重新登录</strong>即可执行docker ps等命令了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像导出与导入</title>
      <link href="/2020/07/21/Docker%E9%95%9C%E5%83%8F%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5/"/>
      <url>/2020/07/21/Docker%E9%95%9C%E5%83%8F%E5%AF%BC%E5%87%BA%E4%B8%8E%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>在拉取Docker镜像时，有时会很慢，这时，可以在其它电脑已下载好的导出，然后复制过来导入即可。</p><p>导出镜像：</p><p><code>docker save -o &lt;image_name&gt;.tar &lt;image_name&gt;:&lt;tag&gt;</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721000619.png" alt=""></p><p>导入镜像：</p><p><code>docker load --input &lt;image_name&gt;.tar    或    docker load &lt; &lt;docker_name&gt;.tar</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TMS开发组件包-TAdvStringGrid表格控件</title>
      <link href="/2020/07/20/TMS%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%8C%85-TAdvStringGrid%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6/"/>
      <url>/2020/07/20/TMS%E5%BC%80%E5%8F%91%E7%BB%84%E4%BB%B6%E5%8C%85-TAdvStringGrid%E8%A1%A8%E6%A0%BC%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>最近项目涉及一些复杂表格显示的实现，尝试使用Dev Express的cxGrid控件多次还是没法实现想要的效果，后来发现，<a href="https://www.tmssoftware.com/site/products.asp?t=vclp" target="_blank" rel="noopener">TMS</a>开发组件包的TAdvStringGrid可以实现效果。这里举例来说明一下，例如，需要实现如下效果:</p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720232036.png" alt=""></p><p>  如上所示是一个3行4列的表格，其中，第一行的1、2列合并，第2行的2、3列合并，下面使用TAdvStringGrid来实现，步骤如下：</p><ul><li><p>新建一个VCL窗口项目，布局界面</p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720232123.png" alt=""></p><p>添加TAdvStringGrid控件，默认它是一个5列10行的空白表格，这里需要自定义数据，这里修改它的ColCount和RowCount属性为0，但是，默认还是一个1列1行的空白表格，这里可以不用理会。</p><p>按钮”显示数据”点击后，就显示如上效果的表格。</p></li><li><p>实现如上Excel表格展示效果</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TForm1</span>.<span class="title">btn1Click</span><span class="params">(Sender: TObject)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">        count: Integer;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  AdvStringGrid1.ColCount := <span class="number">0</span>;</span><br><span class="line">  AdvStringGrid1.RowCount := <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 初始化行列 (3行4列)</span></span><br><span class="line">  <span class="keyword">for</span> count := <span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span> <span class="keyword">do</span>              <span class="comment">// 因为第一行是表格头，因此就2行，从0开始数，所以为2-1=1，行与列一样的道理。</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">      AdvStringGrid1.AddRow;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">for</span> count := <span class="number">0</span> <span class="keyword">to</span> <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">      AdvStringGrid1.AddColumn;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"> </span><br><span class="line">  AdvStringGrid1.MergeCells(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">0</span>, <span class="number">0</span>] := <span class="string">'1'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">2</span>, <span class="number">0</span>] := <span class="string">'2'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">3</span>, <span class="number">0</span>] := <span class="string">'3'</span>;</span><br><span class="line"> </span><br><span class="line">  AdvStringGrid1.MergeCells(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">0</span>, <span class="number">1</span>] := <span class="string">'4'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">1</span>, <span class="number">1</span>] := <span class="string">'5'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">3</span>, <span class="number">1</span>] := <span class="string">'6'</span>;</span><br><span class="line"> </span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">0</span>, <span class="number">2</span>] := <span class="string">'7'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">1</span>, <span class="number">2</span>] := <span class="string">'8'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">2</span>, <span class="number">2</span>] := <span class="string">'9'</span>;</span><br><span class="line">  AdvStringGrid1.Cells[<span class="number">3</span>, <span class="number">2</span>] := <span class="string">'10'</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>运行如下:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720232345.png" alt=""></p><p>效果实现，其他的TMS组件可以自己再尝试使用即可。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Delphi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Delphi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TcxCurrencyEdit无法输入小数问题解决</title>
      <link href="/2020/07/20/TcxCurrencyEdit%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/07/20/TcxCurrencyEdit%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E5%B0%8F%E6%95%B0%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>最近在使用TcxCurrencyEdit控件时，发现配置了指定输入小数位数，却无法输入小数的问题：</p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720231412.png" alt=""></p><p><strong>解决方法</strong>：</p><blockquote><p>“控制面板” - “时间和区域” - “区域” - “更改日期、时间或数字格式”<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720231506.png" alt=""><br>修改货币tab栏的小数位数为2或其他实际需要的位数即可:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720231526.png" alt=""></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Delphi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Delphi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码环境搭建_idea</title>
      <link href="/2020/07/20/Spring%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-idea/"/>
      <url>/2020/07/20/Spring%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-idea/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前提条件：安装Git和Gradle(也可以使用源码包里配置的版本，推荐使用自己安装的，方便执行命令)</p></blockquote><h2 id="源码下载-git-clone-git-github-com-SpringSource-Spring-framework-git"><a href="#源码下载-git-clone-git-github-com-SpringSource-Spring-framework-git" class="headerlink" title="[源码下载](git clone git://github.com/SpringSource/Spring-framework.git)"></a>[源码下载](git clone git://github.com/SpringSource/Spring-framework.git)</h2><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720221952.png" alt=""></p><h2 id="导入IDEA"><a href="#导入IDEA" class="headerlink" title="导入IDEA"></a>导入IDEA</h2><p>查看开源代码，首先是看它的README.md文件，它会告诉我们很多东西，这里可以看到，如果要导入IDEA集成开发环境，需要去看哪个文件操作:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720222053.png" alt=""></p><p>打开文件”import-into-idea.md”可以看到如下几步：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720222142.png" alt=""></p><p>按照提示的步骤即可导入:</p><ul><li>执行命令<code>./gradlew :spring-oxm:compileTestJava</code>，结果如下：</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720223803.png" alt=""></p><ul><li>导入IntelliJ IDEA（File-&gt;New-&gt;Project from existing Sources-&gt;Navigate to directory-&gt;Select build.gradle）</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720223915.png" alt=""></p><ul><li>点击【Open】等待下载依赖导入:</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720224027.png" alt=""></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720230250.png" alt=""></p><ul><li>测试构建模块Spring-aop:</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720230323.png" alt=""></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200720230508.png" alt=""></p><p>好了，Spring源码环境搭建好了，有时间的话可以慢慢了解下Spring的关键技术如何实现了，努力做到知其所以然~</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编译OpenCV生成动态库问题解决</title>
      <link href="/2020/07/18/C++%E7%BC%96%E8%AF%91OpenCV%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E5%BA%93%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/07/18/C++%E7%BC%96%E8%AF%91OpenCV%E7%94%9F%E6%88%90%E5%8A%A8%E6%80%81%E5%BA%93%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>1.包含&lt;opencv2/objdectect/objdetect.hpp&gt;, 声明了CascadeClassifier变量后，工程如下:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002411.png" alt=""></p><p>执行make命令后发生如下错误：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002435.png" alt=""></p><p>解决，增加Lib链接，如下：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002503.png" alt=""><br>再次make，可以了。</p><p>2.增加imread函数调用后，发生如下错误:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002555.png" alt=""></p><p>makefile需要增加如下链接(-lopencv_imgcodes):<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002640.png" alt=""></p><p>python调用人脸检测后，成功识别出两个人脸:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002703.png" alt=""></p><p>3.上面是在mac上运行的，把so库拿到centos上运行时，报如下错误:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002746.png" alt=""></p><p>在用户加目录的.bashrc增加如下这行(永久生效)或直接命令行执行(临时生效)，即可:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200721002805.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANTLR(一)</title>
      <link href="/2020/07/15/ANTLR(%E4%B8%80)/"/>
      <url>/2020/07/15/ANTLR(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.antlr.org" target="_blank" rel="noopener">ANTLR</a>是基于Java编写的，一款强大的语法分析器生成工具，可用于读取、处理、执行和翻译结构化文本或二进制文件。除了间接左递归，ANTLR 4几乎能处理任何语法。</p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>安装很简单，下载最新jar包即可，该jar包包含了运行ANTLR的工具和编译、执行ANTLR产生的识别程序所依赖的全部运行库，即ANTLR工具将语法文件转换成可以识别该语法文件所描述的语言的程序。</p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715220716.png" alt=""></p><p>下载好后，还需配置CLASSPATH使得Java程序能找到ANTLR工具和运行库:<code>export CLASSPATH=&quot;.:/Users/linjk/Documents/usr/services/antlr-4.8-complete.jar:$CLASSPATH&quot;</code></p><p>在shell的rc文件配置别名，方便启动：<code>alias antlr4=&#39;java -jar /Users/linjk/Documents/usr/services/antlr-4.8-complete.jar&#39;</code>，配置调试工具: <code>alias grun=&#39;java org.antlr.v4.gui.TestRig&#39;</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715220953.png" alt=""></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715221051.png" alt=""></p><h2 id="入门体验"><a href="#入门体验" class="headerlink" title="入门体验"></a>入门体验</h2><p>为了简单，定义一个能识别类似hello world或hello jim的词组的语法：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715221847.png" alt=""></p><p>接下来编译该语法文件：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715222023.png" alt=""><br>提示不匹配，语法名字和文件名字应一致，修改一致后：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715222204.png" alt=""></p><p>它生成了antlrHelloParser.java和antlrHelloLexer.java组成的、可以运行的语法识别程序。(这里还缺少一个main程序来触发语言识别过程)</p><p>然后编译生成class文件<code>javac -g *.java</code>，<code>grun antlrHello r -tokens</code>来运行：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715223921.png" alt=""><br>运行后，输入hello world，然后ctrl+d来输入文件结束符，因为使用了选项<code>-r tokens</code>，所以上面打印出来全部的词法符号的列表。还可以导出语法分析树：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200715224424.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
          <category> ANTLR </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANTLR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenResty(二)-Nginx和Lua基础</title>
      <link href="/2020/07/09/OpenResty(%E4%BA%8C)-Nginx%E5%92%8CLua%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/07/09/OpenResty(%E4%BA%8C)-Nginx%E5%92%8CLua%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><blockquote><p><a href="http://nginx.org/en/docs/" target="_blank" rel="noopener">Nginx模块配置文档</a></p></blockquote><ul><li>能通过Lua代码解决的，<strong>不用</strong>Nginx的配置、变量和模块解决</li><li>Nginx支持的功能，OpenResty不一定支持，需要看版本号，它们的版本号保持一致的</li></ul><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><pre class="mermaid">graph LR    Master进程 --> Worker进程1     subgraph 客户端连接        客户端1 --> Worker进程1        客户端2 --> Worker进程1    end    Master进程 --> Worker进程2    Master进程 --> Worker进程...    Master进程 --> Worker进程n</pre><p>Master进程不负责处理终端的请求，它只管理Worker进程，主要是接受管理员发送的信号量、监控Worker的运行状态。<br>Worker进程从Master进程<strong>fork</strong>出来的，彼此之间相互独立，互不影响。有多个worker进程时，其中一个Worker进程奔溃退出了，并不会影响其他Worker进程。</p><p>Nginx和OpenResty的<a href="https://github.com/openresty/lua-nginx-module#readme" target="_blank" rel="noopener">生命周期关系</a>：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200710002937.png" alt=""></p><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> OpenResty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MariaDB</title>
      <link href="/2020/07/08/Docker%E5%AE%89%E8%A3%85MariaDB/"/>
      <url>/2020/07/08/Docker%E5%AE%89%E8%A3%85MariaDB/</url>
      
        <content type="html"><![CDATA[<p>MariaDb在官网的Mac系统的pkg包居然是10.2版本的，最新都10.5.4了，只能在docker仓库里查找一下是否有官方包了:<code>docker search mariadb</code>，有，很好，下载最新版本: <code>docker pull mariadb:10.5.4</code></p><p>查看本地已有的所有镜像确认一下：<code>docker images</code>:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200709003233.png" alt=""></p><p>运行数据库前，首先创建数据目录:<br><code>mkdir -p /Users/linjk/Documents/docker/mariadb/data</code> </p><p>启动数据库服务: <code>docker run --name mariadb -p 3298:3306 -e MYSQL_ROOT_PASSWORD={root用户密码} -v /Users/linjk/Documents/docker/mariadb/data:/var/lib/mysql -d mariadb:10.5.4</code>，参数说明</p><table><thead><tr><th>参数名</th><th>参数说明</th></tr></thead><tbody><tr><td>–name</td><td>运行的容器的名称</td></tr><tr><td>-p</td><td>主机端口：容器端口的映射关系</td></tr><tr><td>-e</td><td>设置数据库root用户的密码</td></tr><tr><td>-v</td><td>数据卷映射</td></tr><tr><td>-d</td><td>后台运行容器的模式</td></tr></tbody></table><p>查看容器是否运行<code>docker ps -a</code>:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200709003808.png" alt=""></p><blockquote><p>如果需要容器在运行docker服务后自启动，可以配置：<code>docker container update --restart=always {容器id}</code><br>如果需要进入容器查看数据库更多信息，可以配置：<code>docker exec -it {容器Id} bash</code>，然后执行命令<code>mysql -uroot -proot密码</code>即可在容器内登录数据库。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
          <category> MariaDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MariaDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenResty(一)-入门</title>
      <link href="/2020/07/06/OpenResty(%E4%B8%80)-%E5%85%A5%E9%97%A8/"/>
      <url>/2020/07/06/OpenResty(%E4%B8%80)-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/openresty/openresty.org" target="_blank" rel="noopener">OpenResty</a>诞生于2007年，是一个兼具开发效率和性能的服务端开发平台，其核心是基于Nginx的一个C模块(lua-nginx-module)，该模块将LuaJIT嵌入到Nginx服务器中，并对外提供了一套完整的Lua API，透明地支持非阻塞I/O，提供了轻量级线程、定时器等高级抽象。主要用来实现微服务API网关。</p><pre class="mermaid">graph LR;    OpenResty三大特性-->详尽的文档和测试用例;    OpenResty三大特性-->同步非阻塞;    OpenResty三大特性-->动态;</pre><blockquote><p>对于 OpenResty 来说，绝大部分都是同步操作，只有 ngx.timer 这种后台定时器相关的 API，才是异步操作</p></blockquote><h3 id="安装OpenResty"><a href="#安装OpenResty" class="headerlink" title="安装OpenResty"></a>安装OpenResty</h3><p><code>brew tap openresty/brew &amp;&amp; brew install openresty</code></p><blockquote><p>小插曲：<br>brew命令卡在<strong>Updating Homebrew…</strong><br>可以<code>Ctrl+C</code>取消下就可以了<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707222135.png" alt="brew慢问题懒人解决方式"></p></blockquote><p>OK, 安装成功：<br><code>which resty &amp;&amp; resty -e &quot;ngx.say(&#39;【OpenResty】&#39;)&quot;</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707230630.png" alt="OpenResty安装成功"></p><p>安装信息：<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708002135.png" alt=""></p><blockquote><p>–prefix就是安装路径了</p></blockquote><h3 id="雏形"><a href="#雏形" class="headerlink" title="雏形"></a>雏形</h3><p>上面直接通过命令行的-e参数运行nginx服务的，现在，正式一点，在文件夹下通过配置文件配置方式，更接近实际：</p><p><a href="https://github.com/openresty/lua-nginx-module#content_by_lua_file" target="_blank" rel="noopener">更详细API参考</a></p><ul><li>准备目录结构</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707231028.png" alt="目录"></p><ul><li>准备配置文件</li></ul><p><code>vim demo/conf/nginx.conf</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707231257.png" alt="nginx.conf"></p><ul><li>启动OpenResty服务</li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707231410.png" alt="OpenResty服务"><br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200707231446.png" alt="访问测试"></p><ul><li>退出服务</li></ul><p><code>openresty -p</code>pwd<code>-c demo/conf/nginx.conf -s quit</code></p><p>上面直接把代码放在配置文件，不合适，现在把它抽出来：</p><p><code>mkdir demo/lua &amp;&amp; echo &quot;ngx.say(&#39;openresty&#39;)&quot; &gt; demo/lua/openresty.lua &amp;&amp; cat demo/lua/openresty.lua</code></p><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708001505.png" alt=""></p><p>然后修改配置文件nginx.conf:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708001638.png" alt=""></p><p>重启OpenResty服务，可以正常访问。</p><h3 id="寻求帮助"><a href="#寻求帮助" class="headerlink" title="寻求帮助"></a>寻求帮助</h3><p>可以借助OpenResty提供的命令<code>restydoc</code>，如：</p><blockquote><p>restydoc -s ngx.say<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708002431.png" alt=""><br>这些文档的路径就是–prefix参数下的pod子文件夹</p></blockquote><h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p><a href="http://opm.openresty.org" target="_blank" rel="noopener">OPM</a>是OpenResty自带的包管理器(<em>不支持私有包</em>)，类似docker search，opm也支持搜索:<br><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708003326.png" alt=""></p><p><a href="https://github.com/bungle/awesome-resty" target="_blank" rel="noopener">这里</a>维护了几乎所有OpenResty可用的包。</p><p><a href="https://luarocks.org" target="_blank" rel="noopener">luarockers</a>是推荐使用的包管理工具，安装步骤：</p><ul><li><p>wget <a href="https://luarocks.org/releases/luarocks-3.3.1.tar.gz" target="_blank" rel="noopener">https://luarocks.org/releases/luarocks-3.3.1.tar.gz</a></p></li><li><p>tar zxf luarocks-3.3.1.tar.gz</p></li><li><p>【需事先安装lua】cd luarocks-3.3.1 &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install</p></li></ul><p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/20200708004213.png" alt=""></p><h3 id="OPM项目初探"><a href="#OPM项目初探" class="headerlink" title="OPM项目初探"></a>OPM项目初探</h3><p>通过官方的<a href="https://github.com/openresty/opm" target="_blank" rel="noopener">OPM项目</a>，了解OpenResty的基本开发的目录结构，有助于入门。透过这个项目，可以学习一个OpenResty项目是如何分层组织起来的。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> OpenResty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenResty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AboutMe</title>
      <link href="/2020/07/05/AboutMe/"/>
      <url>/2020/07/05/AboutMe/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/linjk/linjkImgs/raw/master/imgs/wechat.jpg" alt="微信公众号【时光记旅】"></p>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
